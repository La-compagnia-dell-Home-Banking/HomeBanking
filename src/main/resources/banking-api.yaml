# author oleskiy.OS
# API are not completed yet
openapi: 3.0.1
info:
  title: Swagger admin
  description: 'This is a sample server admin server.  You can find out more about     Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For
    this sample, you can use the api key `special-key` to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://admin.swagger.io/v2
  - url: http://admin.swagger.io/v2
tags:
  - name: person
    description: Everything about your persons
    externalDocs:
      description: Find out more
      url: http://swagger.io
paths:
  /persona:
    get:
      tags:
        - persons
      summary: General info about existing persons
      operationId: showInfo
      description: Return options and information about persons
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: person not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
        - admin_auth:
            - write:persons
            - read:persons
      x-codegen-request-body-name: body
  /persona/{personId}:
    get:
      tags:
        - person
      summary: Find person by ID
      description: Returns a single person
      operationId: getPersonById
      parameters:
        - name: personId
          in: path
          description: ID of person to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/person'
            application/json:
              schema:
                $ref: '#/components/schemas/person'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: person not found
          content: {}
      security:
        - api_key: []
    put:
      tags:
        - person
      summary: Updates a person
      operationId: updatePersonById
      parameters:
        - name: personId
          in: path
          description: ID of person that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the person
                status:
                  type: string
                  description: Updated status of the person
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - admin_auth:
            - write:persons
            - read:persons
    delete:
      tags:
        - person
      summary: Deletes a person
      operationId: deletePerson
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: personId
          in: path
          description: person id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: person not found
          content: {}
      security:
        - admin_auth:
            - write:persons
            - read:persons
components:
  schemas:
    company:
      required:
        - name
        - photoUrls
      type: object
      properties:
        azienda_id:
          type: string
          example: 1111111111
        nome:
          type: string
          example: kevin
        ragione_sociale:
          type: string
          example: Example e e e
        partita_iva:
          type: string
          example: 12345678
        nome_rappresentante:
          type: string
          example: Mike
        cognome_rappresentante:
          type: string
          example: Doe
        sede_legale:
          type: string
          example: via Example
        indirizzo:
          type: string
          example: via Example, 123
        cap:
          type: string
          example: 12345
        email:
          type: string
          example: example@mail.com
        telefono:
          type: string
          example: 3332223322
        documento_rappresentante:
          type: string
          example: AA123421
    person:
      required:
        - name
        - photoUrls
      type: object
      properties:
        person_id:
          type: string
          example: 1111111111
        nome:
          type: string
          example: kevin
        cognome:
          type: string
          example: mitnik
        codice_fiscale:
          type: string
          example: SVRTL123D12DA
        data_nascita:
          type: string
          example: 2020-01-01
        luogo_nascita:
          type: string
          example: Foligno
        residenza:
          type: string
          example: Italia
        indirizzo:
          type: string
          example: via Bacciadonne, 32
        cap:
          type: string
          example: 12345
        email:
          type: string
          example: example@mail.com
        telefono:
          type: string
          example: 3332223322
        documento:
          type: string
          example: AA123421
      xml:
        name: person
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    admin_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://admin.swagger.io/oauth/dialog
          scopes:
            write:persons: modify persons in your account
            read:persons: read your persons
    api_key:
      type: apiKey
      name: api_key
      in: header